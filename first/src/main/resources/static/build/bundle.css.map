{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../EditAuto.svelte",
    "../../EditPersonnel.svelte",
    "../../EditRoute.svelte",
    "../../Nav.svelte",
    "../../Edit.svelte",
    "../../Journal.svelte",
    "../../Personnel.svelte",
    "../../Table.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {Router, Link, Route} from \"svelte-routing\";\n    import Table from './route/Table.svelte';\n    import Edit from './route/Edit.svelte';\n    import Personnel from './route/Personnel.svelte';\n    import Nav from './component/Nav.svelte';\n    import Journal from './route/Journal.svelte';\n</script>\n\n<Router>\n    <header>\n        <Nav/>\n    </header>\n\n    <main>\n        <Route path=\"/\" component=\"{Table}\"/>\n        <Route path=\"edit\" component=\"{Edit}\"/>\n        <Route path=\"journal\" component=\"{Journal}\"/>\n\n        <Route path=\"\" component=\"{Table}\"/>\n    </main>\n</Router>\n<style>\n    header {\n        width: 100%;\n        height: 50px;\n        box-sizing: border-box;\n    }\n\n    main {\n        padding: 1em;\n        width: 100%;\n        height: calc(100% - 40px);\n        box-sizing: border-box;\n    }\n</style>",
    "<script>\n    import {onMount} from 'svelte';\n    import {DOMAIN} from '../util.js';\n\n    let autoList = Array();\n    let personnelList = Array();\n\n    let selectedPersonnelForAdding;\n    let selectedPersonnelForChanging;\n    let selectedAuto;\n\n    let changingNum;\n    let changingColor;\n    let changingMark;\n\n    onMount(async () => {\n        await getAuto().then(autos => {\n            autoList = autos;\n            if (autoList.length !== 0) {\n                selectedAuto = autoList[0];\n                changingNum.value = selectedAuto.num;\n                changingColor.value = selectedAuto.color;\n                changingMark.value = selectedAuto.mark;\n            }\n        });\n\n        await getPersonnel().then(personnels => {\n            personnelList = personnels;\n\n            if (personnelList.length !== 0) {\n                selectedPersonnelForAdding = personnelList[0];\n                selectedPersonnelForChanging = personnelList[0];\n            }\n        })\n    });\n\n    async function getAuto() {\n        const response = await fetch(DOMAIN + '/api/auto');\n\n        if (response.ok) {\n            return await response.json();\n        }\n    }\n\n    async function getPersonnel() {\n        const response = await fetch(DOMAIN + '/api/personnel');\n\n        if (response.ok) {\n            return await response.json();\n        }\n    }\n\n    function changePersonnelForAdding(elements) {\n        const select = elements.target;\n\n        const personnelId = parseInt(select.options[select.selectedIndex].id);\n\n        personnelList.forEach(p => {\n            if (p.id === personnelId) {\n                selectedPersonnelForAdding = p;\n            }\n        });\n    }\n\n    async function addAuto(frm) {\n        const form = frm.target;\n\n        const auto = {\n            num: form.num.value,\n            color: form.color.value,\n            mark: form.mark.value,\n            personnel: selectedPersonnelForAdding\n        }\n\n        const response = fetch(DOMAIN + '/api/auto', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: await JSON.stringify(auto)\n        });\n\n        if (response.ok) {\n            await getAuto().then(autos => {\n                autoList = autos;\n            });\n        }\n    }\n\n    function selectAuto(elements) {\n        const select = elements.target;\n\n        const autoId = parseInt(select.options[select.selectedIndex].id);\n\n        autoList.forEach(auto => {\n            if (auto.id === autoId) {\n                selectedAuto = auto;\n                changingNum.value = auto.num;\n                changingColor.value = auto.color;\n                changingMark.value = auto.mark;\n            }\n        });\n    }\n\n    function changePersonnelForUpdating(elements) {\n        const select = elements.target;\n\n        const personnelId = parseInt(select.options[select.selectedIndex].id);\n\n        personnelList.forEach(p => {\n            if (p.id === personnelId) {\n                selectedPersonnelForChanging = p;\n            }\n        });\n    }\n\n    async function changeAuto() {\n        const newAuto = {\n            id: selectedAuto.id,\n            num: changingNum.value,\n            color: changingColor.value,\n            mark: changingMark.value,\n            personnel: selectedPersonnelForChanging\n        }\n\n        const response = await fetch('/api/auto', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: await JSON.stringify(newAuto)\n        })\n\n        if (response.ok) {\n            await getAuto().then(autos => {\n                autoList = autos;\n            });\n        }\n    }\n\n    async function removeAuto() {\n        const auto = selectedAuto;\n\n        const response = await fetch('api/auto', {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: await JSON.stringify(auto)\n        });\n\n        if (response.ok) {\n            await getAuto().then(autos => {\n                autoList = autos;\n                if (autoList.length !== 0) {\n                    selectedAuto = autoList[0];\n                    changingNum.value = selectedAuto.num;\n                    changingColor.value = selectedAuto.color;\n                    changingMark.value = selectedAuto.mark;\n                }\n            });\n        }\n    }\n</script>\n\n<div class=\"container\">\n    <div class=\"addBlock\">\n        <div class=\"title\">Add Auto</div>\n        <form class=\"addElement\" on:submit={addAuto}>\n            <input type=\"text\" id=\"num\" name=\"num\" placeholder=\"num\" required/>\n            <input type=\"text\" id=\"color\" name=\"color\" placeholder=\"color\" required/>\n            <input type=\"text\" id=\"mark\" name=\"mark\" placeholder=\"mark\" required/>\n            <select id=\"personnels\" on:change={changePersonnelForAdding}>\n                {#each personnelList as person}\n                    <option id=\"{person.id}\">{`${person.lastname} ${person.firstname.charAt(0)} ${person.pathername\n                    .charAt\n                    (0)}`}</option>\n                {/each}\n            </select>\n            <input type=\"submit\"/>\n        </form>\n    </div>\n\n    <div class=\"editBlock\">\n        <div class=\"title\">Edit Auto</div>\n        <select on:change={selectAuto}>\n            {#each autoList as auto}\n                <option id=\"{auto.id}\">{`${auto.num} ${auto.color} ${auto.mark}`}</option>\n            {/each}\n        </select>\n\n        <form class=\"personnelData\">\n            <div>\n                <label for=\"num1\">Num</label>\n                <input type=\"text\" id=\"num1\" bind:this={changingNum}/>\n            </div>\n\n\n            <div>\n                <label for=\"color1\">Color</label>\n                <input type=\"text\" id=\"colo1\" bind:this={changingColor}/>\n            </div>\n\n\n            <div>\n                <label for=\"mark1\">Mark</label>\n                <input type=\"text\" id=\"mark1\" bind:this={changingMark}/>\n            </div>\n\n            <div>\n                <label for=\"personnel1\">Personnel</label>\n                <select name=\"personnel1\" on:change={changePersonnelForUpdating}>\n                    {#each personnelList as person}\n                        <option id=\"{person.id}\">{`${person.lastname} ${person.firstname.charAt(0)} ${person.pathername\n                        .charAt\n                        (0)}`}\n                        </option>\n                    {/each}\n                </select>\n            </div>\n\n\n            <input type=\"button\" value=\"Изменить\" on:click={changeAuto}/>\n            <input type=\"button\" value=\"Удалить\" on:click={removeAuto}/>\n        </form>\n    </div>\n</div>\n\n\n<style>\n    .container {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        display: grid;\n        gap: 1em;\n    }\n\n    .addBlock {\n        display: grid;\n        align-content: start;\n        gap: 0.5em;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n\n    .addElement {\n        display: grid;\n        grid-auto-flow: column;\n        gap: 0 0.5em;\n    }\n\n    input {\n        outline: none;\n    }\n\n    .editBlock {\n        display: grid;\n        align-content: start;\n        gap: 0.5em;\n    }\n\n    .personnelData {\n        display: grid;\n        align-content: start;\n        gap: 0 0.5em;\n    }\n\n</style>",
    "<script>\n    import {onMount} from \"svelte\";\n    import {DOMAIN} from '../util.js';\n\n    let personnelList = Array();\n\n    let selectedPersonnel;\n\n    let firstNameInput;\n    let lastNameInput;\n    let patherNameInput;\n\n    onMount(async () => {\n        await getPersonnel().then(pernnells => {\n            personnelList = pernnells;\n\n            if (personnelList.length !== 0) {\n                selectedPersonnel = personnelList[0];\n                firstNameInput.value = selectedPersonnel.firstname;\n                lastNameInput.value = selectedPersonnel.lastname;\n                patherNameInput.value = selectedPersonnel.pathername;\n            }\n        });\n    });\n\n    async function getPersonnel() {\n        const response = await fetch(DOMAIN + '/api/personnel');\n\n        if (response.ok) {\n            return (await response.json());\n        }\n    }\n\n    async function addPersonnel(frm) {\n        const form = frm.target;\n\n        const firstname = form.firstname.value;\n        const lastname = form.lastname.value;\n        const pathername = form.pathername.value;\n\n        const perspnnel = {\n            firstname: firstname,\n            lastname: lastname,\n            pathername: pathername\n        }\n\n        const response = await fetch(DOMAIN + '/api/personnel', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': \"application/json\"\n            },\n            body: await JSON.stringify(perspnnel),\n        });\n\n        if (response.ok) {\n            await getPersonnel();\n            document.location.pathername= \"/edit\";\n        }\n    }\n\n    async function updatePerson() {\n        const personnel = {\n            id: selectedPersonnel.id,\n            firstname: firstNameInput.value,\n            lastname: lastNameInput.value,\n            pathername: patherNameInput.value\n        };\n\n\n        const response = await fetch(DOMAIN + '/api/personnel', {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": 'application/json; charset=UTF-8'\n            },\n            body: await JSON.stringify(personnel)\n        });\n\n        if (response.ok) {\n            const changedPersonnel = await response.json();\n            const newPersonnelList = await personnelList.slice();\n\n            await newPersonnelList.forEach(p => {\n                if (p.id === changedPersonnel.id) {\n                    p.firstname = changedPersonnel.firstname;\n                    p.lastname = changedPersonnel.lastname;\n                    p.pathername = changedPersonnel.pathername;\n                }\n            });\n\n            personnelList = newPersonnelList;\n        }\n    }\n\n    function selectPersonnel(elements) {\n        const select = elements.target;\n\n        const personnelId = parseInt(select.options[select.selectedIndex].id);\n\n        personnelList.forEach(p => {\n            if (p.id === personnelId) {\n                selectedPersonnel = p;\n                firstNameInput.value = p.firstname;\n                lastNameInput.value = p.lastname;\n                patherNameInput.value = p.pathername;\n            }\n        });\n    }\n\n    async function deletePerson() {\n        const response = await fetch(DOMAIN + '/api/personnel', {\n            method: 'DELETE',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: await JSON.stringify(selectedPersonnel)\n        });\n\n        if (response.ok) {\n            await getPersonnel().then(pernnells => {\n                personnelList = pernnells;\n\n                if (personnelList.length !== 0) {\n                    selectedPersonnel = personnelList[0];\n                    firstNameInput.value = selectedPersonnel.firstname;\n                    lastNameInput.value = selectedPersonnel.lastname;\n                    patherNameInput.value = selectedPersonnel.pathername;\n                }\n            });\n        };\n    }\n</script>\n\n\n<div class=\"container\">\n    <div class=\"addBlock\">\n        <div class=\"title\">Add Personnel</div>\n        <form class=\"addElement\" on:submit={addPersonnel}>\n            <input type=\"text\" id=\"firstname\" placeholder=\"firstname\" required/>\n            <input type=\"text\" id=\"lastname\" placeholder=\"lastname\" required/>\n            <input type=\"text\" id=\"pathername\" placeholder=\"pathername\" required/>\n            <input type=\"submit\"/>\n        </form>\n    </div>\n\n    <div class=\"editBlock\">\n        <div class=\"title\">Edit Personnel</div>\n        <select on:change={selectPersonnel}>\n            {#each personnelList as person}\n                <option id=\"{person.id}\">{`${person.lastname} ${person.firstname.charAt(0)} ${person.pathername\n                .charAt\n                (0)}`}</option>\n            {/each}\n        </select>\n\n        <form class=\"personnelData\">\n\n            <div>\n                <label for=\"firstname1\">Firstname</label>\n                <input type=\"text\" id=\"firstname1\" bind:this={firstNameInput}/>\n            </div>\n\n\n            <div>\n                <label for=\"lastname1\">Lastname</label>\n                <input type=\"text\" id=\"lastname1\" bind:this={lastNameInput}/>\n            </div>\n\n\n            <div>\n                <label for=\"pathername1\">Pathername</label>\n                <input type=\"text\" id=\"pathername1\" bind:this={patherNameInput}/>\n            </div>\n\n            <input type=\"button\" value=\"Изменить\" on:click={updatePerson}/>\n            <input type=\"button\" value=\"Удалить\" on:click={deletePerson}/>\n        </form>\n    </div>\n</div>\n\n<style>\n    .container {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        display: grid;\n        gap: 0.5em;\n    }\n\n    .addBlock {\n        display: grid;\n        align-content: start;\n        gap: 0.5em;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n\n    .addElement {\n        display: grid;\n        grid-auto-flow: column;\n        gap: 0 0.5em;\n    }\n\n    input {\n        outline: none;\n    }\n\n    .editBlock {\n        display: grid;\n        align-content: start;\n        gap: 0.5em;\n    }\n\n    .personnelData {\n        display: grid;\n        align-content: start;\n        gap: 0 0.5em;\n    }\n</style>",
    "<script>\n    import {onMount} from 'svelte';\n    import {DOMAIN} from '../util.js';\n\n    let routes = Array();\n\n    let checked = false;\n\n    let addName = '';\n\n    let selectedRoute = null;\n\n    let editName = '';\n\n    onMount(async () => {\n        const response = await fetch(DOMAIN + '/api/route');\n\n        if (response.ok) {\n            routes = Array.from(await response.json());\n            checked = true;\n\n            selectedRoute = routes.length === 0 ? null : routes[0];\n            editName = selectedRoute == null ? '' : selectedRoute.name;\n        }\n\n\n    });\n\n    async function addRoute() {\n        const route = {\n            name: addName\n        };\n\n\n        const response = await fetch(DOMAIN + '/api/route', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(route),\n        });\n\n        if (response.ok) {\n            routes.push(await response.json());\n            routes = routes.slice();\n            selectedRoute = routes.length !== 1 ? selectedRoute : routes[0];\n            editName = selectedRoute == null ? '' : selectedRoute.name;\n        }\n    }\n\n    function changeFields() {\n        editName = selectedRoute == null ? '' : selectedRoute.name;\n    }\n\n    async function changeRoute() {\n        const route = {\n            id: selectedRoute.id,\n            name: editName\n        }\n\n        const response = await fetch(DOMAIN + '/api/route', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(route),\n        });\n\n        if (response.ok) {\n            const updatedRoute = await response.json();\n\n            routes = routes.map(route => {\n                if (route.id === selectedRoute.id) {\n                    return updatedRoute;\n                } else {\n                    return route;\n                }\n            });\n        }\n    }\n\n    async function deleteRoute() {\n        const route = {\n            id: selectedRoute.id,\n            name: editName\n        }\n\n        const response = await fetch(DOMAIN + '/api/route', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(route),\n        });\n\n        if (response.ok) {\n            routes = routes.filter(route => route.id !== selectedRoute.id);\n            selectedRoute = routes.length === 0 ? null : routes[0];\n            editName = selectedRoute == null ? '' : selectedRoute.name;\n        }\n    }\n</script>\n\n<div class=\"container\">\n    {#if checked}\n        <form on:submit|preventDefault={addRoute}>\n            <div class=\"title\">\n                Add Route\n            </div>\n            <input type=\"text\" placeholder=\"name\" bind:value={addName} required>\n            <input type=\"submit\" value=\"Добавить\">\n        </form>\n\n        <form on:submit|preventDefault={changeRoute}>\n            <div class=\"title\">\n                Edit Route\n            </div>\n            <select bind:value={selectedRoute} on:change={changeFields}>\n                {#each routes as route, i}\n                    {#if i === 0}\n                        <option value={route} selected>{route.name}</option>\n                    {:else}\n                        <option value={route}>{route.name}</option>\n                    {/if}\n                {/each}\n            </select>\n\n            <input type=\"text\" placeholder=\"name\" bind:value={editName} required>\n            <input type=\"submit\" value=\"Изменить\">\n            <input type=\"button\" value=\"Удалить\" on:click={deleteRoute}>\n        </form>\n    {/if}\n\n</div>\n\n<style>\n    .container {\n        display: grid;\n        justify-content: left;\n        align-content: start;\n        gap: 1em;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n\n    form {\n        display: grid;\n        align-content: start;\n        justify-content: left;\n        gap: 0.5em;\n    }\n</style>",
    "<script>\n    import {link} from \"svelte-routing\";\n</script>\n\n<div class=\"component\">\n    <a href=\"/\" class=\"nav-item\" use:link>Auto</a>\n    <a href=\"/edit\" class=\"nav-item\" use:link>Edit</a>\n    <a href=\"/journal\" class=\"nav-item\" use:link>Journal</a>\n\n    <a id=\"logout\" href=\"/logout\">logout</a>\n</div>\n\n\n<style>\n    .component {\n        display: flex;\n        align-content: center;\n        padding: 1em;\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n    }\n\n    .nav-item {\n        margin-right: 1em;\n    }\n\n    #logout {\n        margin-left: auto;\n        margin-right: 1em;\n    }\n</style>",
    "<script>\n    import EditPersonnel from '../component/EditPersonnel.svelte';\n    import EditAuto from '../component/EditAuto.svelte';\n    import EditRoute from '../component/EditRoute.svelte';\n\n</script>\n\n<div class=\"container\">\n    <EditPersonnel/>\n    <EditAuto/>\n    <EditRoute/>\n</div>\n\n<style>\n    .container {\n        display: grid;\n        grid-auto-flow: column;\n        gap: 0 1em;\n        align-content: start;\n        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n    }\n</style>",
    "<script>\n    import {onMount} from 'svelte';\n    import {DOMAIN} from '../util.js';\n\n    let autos = Array();\n    let routes = Array();\n    let journal = Array();\n\n    let addTimeIn;\n    let addTimeOut;\n    let addAuto;\n    let addRoute;\n\n    let editEntry;\n    let editAuto;\n    let editRoute;\n    let editTimeIn;\n    let editTimeOut;\n\n    onMount(async () => {\n        autos = await getAuto();\n        routes = await getRoutes();\n        journal = await getEntires();\n\n        addAuto = autos.length === 0 ? null : autos[0];\n        addRoute = routes.length === 0 ? null : routes[0];\n\n        editAuto = autos.length === 0 ? null : autos[0];\n        editRoute = routes.length === 0 ? null : routes[0];\n        editEntry = journal.length === 0 ? null : journal[0];\n    });\n\n    async function getAuto() {\n        const response = await fetch(DOMAIN + '/api/auto');\n\n        if (response.ok) {\n            return await response.json();\n        }\n    }\n\n    async function getRoutes() {\n        const response = await fetch(DOMAIN + '/api/route');\n\n        if (response.ok) {\n            return await response.json();\n        }\n    }\n\n    async function getEntires() {\n        const response = await fetch(DOMAIN + '/api/journal');\n\n        if (response.ok) {\n            return await response.json();\n        }\n    }\n\n    async function addEntry() {\n        const entry = {\n            timeout: addTimeOut,\n            timein: addTimeIn,\n            auto: addAuto,\n            route: addRoute\n        }\n\n        const response = await fetch(DOMAIN + '/api/journal', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(entry)\n        });\n\n        if (response.ok) {\n            journal.push(await response.json());\n            journal = journal.slice();\n\n            editEntry = journal.length === 1 ? journal[0] : editEntry;\n        }\n    }\n\n    async function editJournal() {\n        const entity = {\n            id: editEntry.id,\n            timeout: editTimeOut,\n            timein: editTimeIn,\n            auto: editAuto,\n            route: editRoute\n        }\n\n        const response = await fetch(DOMAIN + '/api/journal', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(entity)\n        });\n\n\n        if (response.ok) {\n            const entr = await response.json();\n            journal = journal.map(entry => {\n                if (entry.id === editEntry.id) {\n                    return entr;\n                } else {\n                    return entry;\n                }\n            });\n        }\n    }\n\n    async function deleteEntry() {\n        const response = await fetch(DOMAIN + '/api/journal', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: await JSON.stringify(editEntry)\n        });\n\n        if (response.ok) {\n            journal = journal.filter(entry => entry.id !== editEntry.id);\n        }\n    }\n</script>\n\n\n<div class=\"container\">\n    <div class=\"add\">\n        <form on:submit|preventDefault={addEntry}>\n            <div class=\"title\">\n                Add Entry\n            </div>\n            <label>\n                Time in\n                <input type=\"datetime-local\" bind:value={addTimeIn} required/>\n            </label>\n\n            <label>\n                Time out\n                <input type=\"datetime-local\" bind:value={addTimeOut} required/>\n            </label>\n\n\n\n            <label>\n                Auto\n                <select bind:value={addAuto} required>\n                    {#each autos as auto}\n                        <option value={auto}>Auto: {auto.id}</option>\n                    {/each}\n                </select>\n            </label>\n\n            <label>\n                Route\n                <select bind:value={addRoute} required>\n                    {#each routes as route}\n                        <option value={route}>Route: {route.name}</option>\n                    {/each}\n                </select>\n            </label>\n            <input type=\"submit\" value=\"Добавить\">\n        </form>\n    </div>\n\n    <div class=\"edit\">\n        <div class=\"title\">\n            Edit Entry\n        </div>\n\n        <form on:submit|preventDefault={editJournal}>\n            <label>\n                Entry\n                <select bind:value={editEntry}>\n                    {#each journal as entry}\n                        <option value={entry}>\n                            entry: {entry.id}\n                        </option>\n                    {/each}\n                </select>\n            </label>\n\n            <label>\n                Time in\n                <input type=\"datetime-local\" bind:value={editTimeIn} required/>\n            </label>\n\n            <label>\n                Time out\n                <input type=\"datetime-local\" bind:value={editTimeOut} required/>\n            </label>\n\n            <label>\n                Auto\n                <select bind:value={editAuto} required>\n                    {#each autos as auto}\n                        <option value={auto}>Auto: {auto.id}</option>\n                    {/each}\n                </select>\n            </label>\n\n            <label>\n                Route\n                <select bind:value={editRoute} required>\n                    {#each routes as route}\n                        <option value={route}>Route: {route.name}</option>\n                    {/each}\n                </select>\n            </label>\n\n            <input type=\"submit\" value=\"Изменить\">\n            <input type=\"button\" value=\"Удалить\" on:click={deleteEntry}>\n        </form>\n    </div>\n</div>\n\n<style>\n    .container {\n        display: grid;\n        justify-content: left;\n        align-content: start;\n        gap: 1em;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n\n    form {\n        display: grid;\n        justify-content: start;\n        align-content: start;\n        gap: 0.5em;\n    }\n\n</style>",
    "<script>\n    import {onMount} from \"svelte\";\n    import {getLastPartOfPathname} from \"../util.js\";\n\n    let personnel = {firstname: \"Сергей\", lastname: \"Кекович\", pathername: \"Кеков\"};\n\n    onMount(async () => {\n        await getPersonnel();\n    });\n\n    async function getPersonnel() {\n        const id = await parseInt(getLastPartOfPathname());\n\n        const response = await fetch(`/api/personnel/${id}`);\n\n        if (response.ok) {\n            personnel = await response.json();\n        }\n    }\n</script>\n\n{#if personnel != null}\n    <div class=\"container\">\n        <div class=\"personalCard\">\n            <div class=\"title\">\n                Карточка персонала\n            </div>\n            <div class=\"row firstname\">\n                <label>Имя</label>\n                {personnel.firstname}\n            </div>\n            <div class=\"row lastname\">\n                <label>Фамилия</label>\n                {personnel.lastname}\n            </div>\n            <div class=\"row pathername\">\n                <label>Отчество</label>\n                {personnel.pathername}\n            </div>\n        </div>\n    </div>\n{/if}\n\n\n<style>\n\n    label {\n        color: black;\n    }\n\n    .title {\n        font-size: 18px;\n    }\n\n    .container {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n    }\n\n    .personalCard {\n        padding: 1em;\n        display: grid;\n        align-content: start;\n\n        gap: 0.5em;\n        width: max-content;\n        box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.1);\n    }\n\n    .row {\n        color: gray;\n    }\n\n    .firstname {\n        width: max-content;\n    }\n\n    .lastname {\n        width: max-content\n    }\n\n    .pathername {\n        width: max-content\n    }\n\n\n</style>",
    "<script>\n    import {link} from \"svelte-routing\";\n    import {onMount} from \"svelte\";\n    import {DOMAIN} from '../util.js';\n\n    let autos = Array();\n\n    onMount(async () => {\n        const response = await fetch(DOMAIN + '/api/auto');\n\n        if (response.ok) {\n            autos = await response.json();\n        }\n    });\n\n    async function deleteCar(elem) {\n        const response = await fetch(DOMAIN + `/api/auto/${elem.target.id}`, {\n            method: \"DELETE\"\n        });\n\n        if (response.ok) {\n            autos = autos.filter(auto => auto.id != elem.target.id);\n        }\n    }\n</script>\n\n<div class=\"container\">\n    <div class=\"table\">\n        <div class=\"title\">\n            <div class=\"column num\">\n                Номер машины\n            </div>\n            <div class=\"column color\">\n                Цвет\n            </div>\n            <div class=\"column mark\">\n                Марка\n            </div>\n            <div class=\"column personnel\">\n                Персонал\n            </div>\n        </div>\n        {#each autos as auto}\n            <div class=\"row\">\n                <div class=\"column num\">\n                    <a href=\"/auto/{auto.id}\" use:link>\n                        {auto.num}\n                    </a>\n                </div>\n                <div class=\"column color\">\n                    {auto.color}\n                </div>\n                <div class=\"column mark\">\n                    {auto.mark}\n                </div>\n                <div class=\"column personnel\">\n                    <a href=\"/personnel/{auto.personnel.id}\" use:link>\n                        {`${auto.personnel.lastname} ${auto.personnel.firstname.charAt(0)}. ${auto.personnel\n                        .pathername.charAt(0)}.`}\n                    </a>\n                </div>\n\n                <div class=\"column delete\">\n                    <a id=\"{auto.id}\"  href=\"#\" on:click={deleteCar}>\n                        Удалить\n                    </a>\n                </div>\n\n            </div>\n        {/each}\n    </div>\n</div>\n\n\n<style>\n    .num {\n        width: 20%;\n    }\n\n    .color {\n        width: 20%;\n    }\n\n    .mark {\n        width: 30%;\n    }\n\n    .personnel {\n        width: 30%;\n    }\n\n    .delete {\n        width: max-content;\n        margin-left: auto;\n    }\n\n    .table {\n        width: 100%;\n        box-sizing: border-box;\n        display: grid;\n        gap: 1em;\n    }\n\n    .title {\n        width: 100%;\n        display: flex;\n        box-sizing: border-box;\n    }\n\n    .row {\n        width: 100%;\n        display: flex;\n        padding-top: 0.5em;\n        padding-bottom: 0.5em;\n        border-top: 1px solid gray;\n        border-bottom: 1px solid gray;\n        box-sizing: border-box;\n    }\n\n    .column {\n        width: 100%;\n        text-align: start;\n    }\n\n    .container {\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n    }\n\n</style>"
  ],
  "names": [],
  "mappings": "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"
}